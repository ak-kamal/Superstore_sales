-- CREATION OF DATBASE
CREATE DATABASE IF NOT EXISTS Superstore_sales_database;

USE SUPERSTORE_SALES_DATABASE;

-- CREATION OF TABLE
CREATE TABLE superstore_sales_data
(ROW_ID INT PRIMARY KEY,
ORDER_PRIORITY DOUBLE,
DISCOUNT DOUBLE,
UNIT_PRICE DOUBLE,
SHIPPING_COST DOUBLE,
CUSTOMER_ID INT,
CUSTOMER_NAME VARCHAR(255),
SHIP_MODE VARCHAR(255),
CUSTOMER_SEGMENT VARCHAR(255),
PRODUCT_CATEGORY VARCHAR(255),
PRODUCT_SUBCATEGORY VARCHAR(255),
PRODUCT_CONTAINER VARCHAR(255),
PRODUCT_NAME VARCHAR(255),
PRODUCT_BASE_MARGIN DOUBLE,
REGION VARCHAR(255),
MANAGER VARCHAR(255),
STATE_OR_PROVINCE VARCHAR(255),
CITY VARCHAR(255),
POSTAL_CODE INT,
ORDER_DATE VARCHAR(255),
SHIP_DATE VARCHAR(255),
PROFIT DOUBLE,
QUANTITY_ORDERED_NEW INT,
SALES DOUBLE,
ORDER_ID INT,
RETURN_STATUS VARCHAR(255)
);

SELECT * FROM SUPERSTORE_SALES_DATA;

-- BULK INSERTION OF DATA INTO THE TABLE
LOAD DATA LOCAL INFILE 'D:/SQL practice/SuperstoreSales.csv'
INTO TABLE superstore_sales_data
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

-- DATA CLEANING
SELECT * FROM superstore_sales_data
LIMIT 10;

SELECT
	ORDER_DATE
FROM SUPERSTORE_SALES_DATA
LIMIT 10;
-- EXCEL SERIAL DATES, STRING TO DATE FUNCTION DOES NOT WORK

SELECT
    ORDER_DATE,
    DATE_ADD('1900-01-01', INTERVAL (ORDER_DATE - 2) DAY) AS FORMATTED_ORDER_DATE,
    YEAR(DATE_ADD('1900-01-01', INTERVAL (ORDER_DATE - 2) DAY)) AS YEAR,
    MONTHNAME(DATE_ADD('1900-01-01', INTERVAL (ORDER_DATE - 2) DAY)) AS MONTH_NAME,
    DAYNAME(DATE_ADD('1900-01-01', INTERVAL (ORDER_DATE - 2) DAY)) AS DAY_NAME,
    SHIP_DATE,
    DATE_ADD('1900-01-01', INTERVAL (SHIP_DATE - 2) DAY) AS FORMATTED_SHIP_DATE,
    YEAR(DATE_ADD('1900-01-01', INTERVAL (SHIP_DATE - 2) DAY)) AS YEAR,
    MONTHNAME(DATE_ADD('1900-01-01', INTERVAL (SHIP_DATE - 2) DAY)) AS MONTH_NAME,
    DAYNAME(DATE_ADD('1900-01-01', INTERVAL (SHIP_DATE - 2) DAY)) AS DAY_NAME
FROM superstore_sales_data
limit 10;
-- DATES CAN BE TAKEN TO YYYY/MM/DD FORMAT

SET SQL_SAFE_UPDATES = 0;

UPDATE SUPERSTORE_SALES_DATA
	SET 
    ORDER_DATE = DATE_ADD('1900-01-01', INTERVAL (ORDER_DATE - 2) DAY),
    SHIP_DATE = DATE_ADD('1900-01-01', INTERVAL (SHIP_DATE - 2) DAY);
-- ALL DATES HAVE BEEN UPDATED TO YYYY/MM/DD FORMAT    
SELECT * FROM superstore_sales_data
LIMIT 10;

SET SQL_SAFE_UPDATES = 1;

-- EXPLORATORY DATA ANALYSIS (EDA)
SELECT
	COUNT(DISTINCT CUSTOMER_NAME) AS TOTAL_NUMBER_OF_CUSTOMERS,
    COUNT(DISTINCT ORDER_ID) AS TOTAL_NUMBER_OF_TRANSACTIONS
FROM superstore_sales_data;

-- RFM SEGMENTATION: CLASSIFY THE CUSTOMERS BASED ON THEIR RECENCY (R), FREQUENCY (F) AND MONETARY (M)

CREATE OR REPLACE VIEW RFM_SEGMENTATION AS
WITH CUSTOMER_AGGREGATED_DATA AS
(SELECT
	CUSTOMER_NAME,
    datediff((SELECT MAX(ORDER_DATE) FROM superstore_sales_data), MAX(ORDER_DATE)) AS RECENCY_VALUE,
    COUNT(DISTINCT ORDER_ID) AS FREQUENCY_VALUE,
    ROUND(SUM(SALES),0) AS MONETARY_VALUE
FROM superstore_sales_data
GROUP BY CUSTOMER_NAME),

RFM_SCORE AS 
(SELECT
	*,
    NTILE(4) OVER (ORDER BY RECENCY_VALUE DESC) AS R_SCORE,
    NTILE(4) OVER (ORDER BY FREQUENCY_VALUE ASC) AS F_SCORE,
    NTILE(4) OVER (ORDER BY MONETARY_VALUE ASC) AS M_SCORE
FROM CUSTOMER_AGGREGATED_DATA)

SELECT
	CUSTOMER_NAME,
    RECENCY_VALUE,
    R_SCORE,
    FREQUENCY_VALUE,
    F_SCORE,
    MONETARY_VALUE,
    M_SCORE,
    (R_SCORE + F_SCORE + M_SCORE) AS TOTAL_RFM_SCORE,
    concat_ws('', R_SCORE, F_SCORE, M_SCORE) AS RFM_SCORE_COMBINATION
FROM RFM_SCORE;

CREATE OR REPLACE VIEW RFM_TAGS AS
SELECT 
    *,
    CASE
        WHEN RFM_SCORE_COMBINATION IN (111, 112, 121, 132, 211, 211, 212, 114, 141) THEN 'CHURNED CUSTOMER'
        WHEN RFM_SCORE_COMBINATION IN (133, 134, 143, 144, 233, 234, 243, 244) THEN 'SLIPPING AWAY, CANNOT LOSE'
        WHEN RFM_SCORE_COMBINATION IN (311, 411, 321) THEN 'NEW CUSTOMERS'
        WHEN RFM_SCORE_COMBINATION IN (212, 211, 221,  223, 133, 222) THEN 'POTENTIAL CHURNERS'
        WHEN RFM_SCORE_COMBINATION IN (323, 333, 331, 341, 422, 332, 432) THEN 'ACTIVE'
        WHEN RFM_SCORE_COMBINATION IN (433, 434, 443, 444) THEN 'LOYAL'
    ELSE 'Other'
    END AS CUSTOMER_SEGMENT
FROM RFM_SEGMENTATION;

-- EXAMPLE FINDINGS
SELECT
	CUSTOMER_SEGMENT,
    COUNT(*) NUMBER_OF_CUSTOMERS,
    ROUND((COUNT(*)*100)/(SELECT COUNT(CUSTOMER_SEGMENT) FROM RFM_TAGS),2) AS PERCENTAGE_OF_TOTAL_CUSTOMERS,
    ROUND(AVG(MONETARY_VALUE), 0) AS AVERAGE_MONETARY_VALUE
FROM RFM_TAGS
GROUP BY CUSTOMER_SEGMENT;